import streamlit as st
import google.generativeai as genai
import pandas as pd
import os
from dotenv import load_dotenv


#  # --- Carga la clave API desde el archivo .env ---
# load_dotenv() # Carga las variables de entorno del archivo .env
# gemini_api_key = os.getenv("GEMINI_API_KEY") # Obtiene la clave de la variable de entorno


# genai.configure(api_key="gemini_api_key")
# model = genai.GenerativeModel('gemini-1.5-flash')



# --- Paso 1: Cargar las variables de entorno del archivo .env ---
load_dotenv()

# --- Paso 2: Obtener la clave API de la variable de entorno ---
# Aseg√∫rate de que el nombre de la variable aqu√≠ (ej. 'GEMINI_API_KEY')
# coincida EXACTAMENTE con el nombre que usaste en tu archivo .env
api_key = os.getenv("GEMINI_API_KEY")

# --- Paso 3: Verificar si la clave se carg√≥ correctamente (para depuraci√≥n) ---
if not api_key:
    st.error("Error: No se encontr√≥ la clave API de Gemini en las variables de entorno. Aseg√∫rate de tener un archivo .env y la variable GEMINI_API_KEY configurada.")
    st.stop() # Detiene la ejecuci√≥n de la app si no hay clave

# --- Paso 4: Configurar la API de Gemini con la clave obtenida ---
genai.configure(api_key=api_key)
model = genai.GenerativeModel('gemini-1.5-flash')

# --- Datos de Seguros (preparados por el Maestro de Contenido) ---
# Simulaci√≥n: en una app real, podr√≠as cargar esto desde un CSV, JSON, o una base de datos.
# Para el hackathon, tenerlo directamente en el c√≥digo o en un archivo .py separado es pr√°ctico.
DATOS_SEGUROS_VIDA = [
    {
        "nombre": "P√≥liza SeguraVida Cl√°sica",
        "aseguradora": "GlobalProtect S.A.",
        "tipo": "Vida Entera",
        "beneficios": "Cobertura vitalicia, acumula valor en efectivo garantizado, elegible para dividendos.",
        "condiciones": "Edad de contrataci√≥n 18-65 a√±os, requiere examen m√©dico, primas fijas.",
        "costo_ejemplo": "USD 80/mes (para persona de 30 a√±os, no fumadora)",
        "ideal_para": "Personas que buscan cobertura permanente, ahorro a largo plazo, planificaci√≥n patrimonial."
    },
    {
        "nombre": "Plan Futuro Brillante",
        "aseguradora": "AseguraM√°s Vida",
        "tipo": "T√©rmino (20 a√±os)",
        "beneficios": "Cobertura por 20 a√±os, prima baja, posibilidad de conversi√≥n a vida entera.",
        "condiciones": "Edad de contrataci√≥n 20-55 a√±os, posible examen m√©dico simplificado, primas fijas durante el t√©rmino.",
        "costo_ejemplo": "USD 35/mes (para persona de 30 a√±os, no fumadora)",
        "ideal_para": "Familias j√≥venes con hijos peque√±os, personas con hipotecas, aquellos que necesitan cobertura por un per√≠odo espec√≠fico."
    },
    {
        "nombre": "Seguro Legado Duradero",
        "aseguradora": "Patrimonio Seguro",
        "tipo": "Vida Entera (con beneficios acelerados)",
        "beneficios": "Cobertura vitalicia, valor en efectivo, acceso anticipado a beneficios en caso de enfermedad terminal.",
        "condiciones": "Edad de contrataci√≥n 25-60 a√±os, examen m√©dico, primas fijas.",
        "costo_ejemplo": "USD 100/mes (para persona de 30 a√±os, no fumadora)",
        "ideal_para": "Quienes buscan seguridad a largo plazo y protecci√≥n adicional ante enfermedades graves."
    },
    {
        "nombre": "Cobertura Express",
        "aseguradora": "Protecci√≥n R√°pida",
        "tipo": "T√©rmino (10 a√±os)",
        "beneficios": "Proceso de aplicaci√≥n r√°pido, sin examen m√©dico (hasta cierto monto), cobertura b√°sica por 10 a√±os.",
        "condiciones": "Edad de contrataci√≥n 20-50 a√±os, primas fijas, l√≠mite de cobertura.",
        "costo_ejemplo": "USD 25/mes (para persona de 30 a√±os, no fumadora)",
        "ideal_para": "Quienes necesitan cobertura r√°pida y b√°sica, sin complicaciones."
    }
]

# --- Interfaz de Usuario en Streamlit ---
st.set_page_config(layout="wide")
st.title("üõ°Ô∏è Comparador Inteligente de Seguros de Vida")
st.write("Encuentra la p√≥liza que mejor se adapta a tus necesidades con la ayuda de la IA.")

st.header("1. Tus Requerimientos")
edad = st.slider("Tu edad", 18, 80, 30)
ingresos_anuales = st.number_input("Ingresos anuales estimados (USD)", min_value=0, value=30000, step=5000)
duracion_cobertura = st.selectbox(
    "¬øPor cu√°nto tiempo deseas la cobertura?",
    ["Corta (ej. 10-20 a√±os)", "Larga (ej. 30+ a√±os o de por vida)", "No estoy seguro"]
)
prioridades = st.multiselect(
    "¬øQu√© es lo m√°s importante para ti en un seguro de vida?",
    ["Costo bajo", "Cobertura de por vida", "Acumulaci√≥n de valor en efectivo", "Proceso r√°pido", "Protecci√≥n ante enfermedades graves", "Flexibilidad"]
)
comentarios_adicionales = st.text_area("¬øAlg√∫n comentario adicional o necesidad espec√≠fica?", "")

if st.button("Encontrar Mi Seguro Ideal"):
    # --- Construcci√≥n del Prompt Din√°mico ---
    prompt_part_1_rol_y_directrices = """
    Eres un asistente de IA experto y neutral en seguros de vida. Tu tarea es analizar los requerimientos de un cliente y la informaci√≥n de varias p√≥lizas de seguro de vida disponibles para recomendar la MEJOR OPCI√ìN que se ajuste a sus necesidades.

    **Directrices para la Recomendaci√≥n:**
    1.  Prioriza la opci√≥n que m√°s se alinee con las necesidades expl√≠citas del cliente (prioridades, duraci√≥n, edad, ingresos).
    2.  Si hay varias opciones buenas, puedes mencionar la siguiente mejor alternativa.
    3.  S√© claro y conciso en la recomendaci√≥n.
    4.  Explica por qu√© la p√≥liza recomendada es la mejor opci√≥n para el cliente.
    5.  Siempre finaliza tu respuesta con una recomendaci√≥n de que el cliente debe consultar con un asesor financiero certificado antes de tomar cualquier decisi√≥n.
    6.  No inventes informaci√≥n sobre seguros no listados.
    7.  Si no hay un ajuste claro, menciona la p√≥liza m√°s cercana y las razones, o indica que las opciones disponibles podr√≠an no ajustarse perfectamente.
    """

    # Convertir los datos de seguros a un formato legible para el prompt
    seguros_disponibles_texto = "\n\n--- Seguros de Vida Disponibles ---\n"
    for seguro in DATOS_SEGUROS_VIDA:
        seguros_disponibles_texto += (
            f"**Nombre:** {seguro['nombre']}\n"
            f"**Aseguradora:** {seguro['aseguradora']}\n"
            f"**Tipo:** {seguro['tipo']}\n"
            f"**Beneficios Clave:** {seguro['beneficios']}\n"
            f"**Condiciones Principales:** {seguro['condiciones']}\n"
            f"**Costo Ejemplo:** {seguro['costo_ejemplo']}\n"
            f"**Ideal Para:** {seguro['ideal_para']}\n"
            f"-----------------------------------\n"
        )

    # Requerimientos del cliente
    requerimientos_cliente_texto = f"""
    --- Requerimientos del Cliente ---
    **Edad:** {edad} a√±os
    **Ingresos Anuales:** USD {ingresos_anuales}
    **Duraci√≥n de Cobertura Deseada:** {duracion_cobertura}
    **Prioridades Clave:** {', '.join(prioridades) if prioridades else 'No especificadas'}
    **Comentarios Adicionales:** {comentarios_adicionales if comentarios_adicionales else 'Ninguno'}
    """

    # Tarea espec√≠fica y formato de salida
    prompt_part_final_tarea = """
    Analiza cuidadosamente los "Seguros de Vida Disponibles" y los "Requerimientos del Cliente". Basado en esta informaci√≥n, selecciona LA MEJOR opci√≥n de seguro de vida para este cliente y justifica tu elecci√≥n.

    **Formato de Respuesta Deseado:**
    ---
    ### ‚ú® Tu Recomendaci√≥n Personalizada: [Nombre del Seguro Recomendado]

    **Aseguradora:** [Nombre de la Aseguradora]
    **Tipo de P√≥liza:** [Tipo de p√≥liza (Ej. Vida Entera, T√©rmino)]

    **‚úÖ Por qu√© este seguro es ideal para ti:**
    [Explicaci√≥n detallada de 2-3 puntos clave que conecten las necesidades del cliente con los beneficios del seguro.]

    **üîç Puntos Clave a Considerar:**
    [Resume brevemente los principales beneficios y condiciones del seguro.]

    **üí∞ Costo Ejemplo:** [Costo estimado del seguro]

    ---
    **Importante:** Recuerda que esta es una recomendaci√≥n basada en la informaci√≥n proporcionada. Te recomendamos encarecidamente **consultar a un asesor financiero certificado** para obtener un an√°lisis personalizado y asegurarte de que la p√≥liza se adapte perfectamente a tu situaci√≥n espec√≠fica.
    """

    # Unir todas las partes para formar el prompt completo
    full_prompt = (
        prompt_part_1_rol_y_directrices +
        seguros_disponibles_texto +
        requerimientos_cliente_texto +
        prompt_part_final_tarea
    )
    
    st.markdown("---")
    st.subheader("Buscando tu seguro ideal...")
    
    try:
        response = model.generate_content(full_prompt)
        st.write(response.text) # Muestra la respuesta formateada por Gemini
    except Exception as e:
        st.error(f"¬°Oops! Hubo un error al buscar tu seguro: {e}. Por favor, int√©ntalo de nuevo m√°s tarde.")
        st.info("Aseg√∫rate de que tu clave API de Gemini sea correcta y que tengas conexi√≥n a internet.")